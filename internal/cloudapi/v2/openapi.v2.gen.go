// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Architecture to use for the compose. If left empty the host arch
	// will be used.
	Architecture *string `json:"architecture,omitempty"`

	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/zLRcrtUygAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
