// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Architecture to use for the compose. If left empty the host arch
	// will be used.
	Architecture *string `json:"architecture,omitempty"`

	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Blueprint    Blueprint     `json:"blueprint"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageBuild defines model for PackageBuild.
type PackageBuild struct {
	Arch      string        `json:"arch"`
	BuildTime *string       `json:"build_time,omitempty"`
	Epoch     *string       `json:"epoch,omitempty"`
	Release   string        `json:"release"`
	Source    PackageSource `json:"source"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageInfo defines model for PackageInfo.
type PackageInfo struct {
	Builds      *[]PackageBuild `json:"builds,omitempty"`
	Description *string         `json:"description,omitempty"`
	Homepage    *string         `json:"homepage,omitempty"`
	Name        string          `json:"name"`
	Summary     string          `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackageSearchRequest defines model for PackageSearchRequest.
type PackageSearchRequest struct {
	Blueprint    Blueprint     `json:"blueprint"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// PackageSearchResponse defines model for PackageSearchResponse.
type PackageSearchResponse struct {
	Packages []PackageInfo `json:"packages"`
}

// PackageSource defines model for PackageSource.
type PackageSource struct {
	License string `json:"license"`
	Version string `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostPackageSearchJSONBody defines parameters for PostPackageSearch.
type PostPackageSearchJSONBody PackageSearchRequest

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// PostPackageSearchJSONRequestBody defines body for PostPackageSearch for application/json ContentType.
type PostPackageSearchJSONRequestBody PostPackageSearchJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
	// Return the package details for one or more packages
	// (POST /packages/search)
	PostPackageSearch(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// PostPackageSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostPackageSearch(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPackageSearch(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)
	router.POST(baseURL+"/packages/search", wrapper.PostPackageSearch)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
