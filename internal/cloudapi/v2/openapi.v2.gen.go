// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Architecture to use for the compose. If left empty the host arch
	// will be used.
	Architecture *string `json:"architecture,omitempty"`

	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// DepsolveRequest defines model for DepsolveRequest.
type DepsolveRequest struct {
	Blueprint    Blueprint     `json:"blueprint"`
	Repositories *[]Repository `json:"repositories,omitempty"`
}

// DepsolveResponse defines model for DepsolveResponse.
type DepsolveResponse struct {
	// Package list including NEVRA
	Packages []PackageMetadata `json:"packages"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch string `json:"arch"`

	// Optional package checksum using ALGO:HASH form
	Checksum  *string `json:"checksum,omitempty"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    *string `json:"sigmd5,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// PostDepsolveBlueprintJSONBody defines parameters for PostDepsolveBlueprint.
type PostDepsolveBlueprintJSONBody DepsolveRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// PostDepsolveBlueprintJSONRequestBody defines body for PostDepsolveBlueprint for application/json ContentType.
type PostDepsolveBlueprintJSONRequestBody PostDepsolveBlueprintJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Depsolve one or more blueprints
	// (POST /depsolve/blueprint)
	PostDepsolveBlueprint(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// PostDepsolveBlueprint converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepsolveBlueprint(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDepsolveBlueprint(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.POST(baseURL+"/depsolve/blueprint", wrapper.PostDepsolveBlueprint)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"c1o7GTevm1fN3S4ReweHj/fXI8vbH5zsnZVOOs3Go3c37FWOndObs9Lpl90JvC85FnGb4e/W0fEIenfP",
	"dqs26hLLsz7jq+OL3d2z3VazWT3A+/voaMtjzsFRPbjjV6dnZ+XiQ816dMjrQ+Og6akz1DocNw5a42G7",
	"S3bH7cODK3rcavLW7u5Dqznebx0N9lsH1WazNRheTXt/Pn9oFuq7D/7AnXSajw9HzvPkxOmSwuf+1ttl",
	"/27UOyoX918qw3b94mD3vEhOv3zevS15wajz+eUm6FTuT9luxascBq7wT673j09OhVfb3+uSEjt8+9Kk",
	"N6WJv/3Qbpw29+yzVuti8tx85vT+tlF/uA1anws98sxu0HX59Pqi1Z9ctupb99uNGr646xKv1vnc41d7",
	"43qrfMpcu3lWPdsL6OSx1MHiED5WT65O78Tnm31YqmL+0DlsPb/R+uVD465yfDGsFbtk8HI/aJTPCz2v",
	"vP/Wqd80Kvf7e72SO3qutt3R66D9coIGpdLbl4dXjz10Ho+PW/3RW/+ze97ZCl4HR13y/Fo4Lk7cx/Ip",
	"7h2yrcNmc3KxfXvPmo+dceesuG893zTG+y3yOuzsBZMX7358Nzrf/RLst+8aF6jy0CVn+LbUPz5vcLu+",
	"5/OD19rZ5y82OSNXnc9H7Pnm8mSv4t0zt2mT/RvHfrhrPD8O/Xtnb8Irhe1tdNElzrDITsmk+Hw+HsKg",
	"X8C3jQtr68vobPh8en12PKjdbt+dTI6D+3vxNv5Cns/Oa/fXB7svJ1X+SL2zsy7pi97NUelzbdK7vi80",
	"K6PdHny9vi+L+u3b+bP1hoadx30MT8+3TwtH1nGrfV26OmhsNcp7dtPdP9i2u2RYHlzhh85VE8Lj4vFx",
	"8+1odD28Pj49HZyUH64e8NH53aQsKseTgz5n0KuNO637i75zidqT092bx+MuGTH/3L3soT6/2a7Vb/rl",
	"3fN2MHh7ZK3a3ete52T4OLh2SneHo077irQmb8Orydb+bfnl0sf3tW3Jo5zL9pdHdkKtk8rJaWe7gN+O",
	"r26uXfF81vy9S36/7N/Uu0TdLvvne8uungVF1ChDT5y76Zf0z1qaq5+SWmq1/qinpeI1pVKNQ3K8UFXX",
	"haeU7T8mFUEuBRoOlMoVS3xR9ay65Ncw4Oq31NpWc6kPYfFiumH9to819yct+mCBQX/NCgrmKdrN9OpU",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
