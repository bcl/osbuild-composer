// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BlueprintCustomizationsPartitioningMode.
const (
	BlueprintCustomizationsPartitioningModeAutoLvm BlueprintCustomizationsPartitioningMode = "auto-lvm"

	BlueprintCustomizationsPartitioningModeLvm BlueprintCustomizationsPartitioningMode = "lvm"

	BlueprintCustomizationsPartitioningModeRaw BlueprintCustomizationsPartitioningMode = "raw"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for CustomizationsPartitioningMode.
const (
	CustomizationsPartitioningModeAutoLvm CustomizationsPartitioningMode = "auto-lvm"

	CustomizationsPartitioningModeLvm CustomizationsPartitioningMode = "lvm"

	CustomizationsPartitioningModeRaw CustomizationsPartitioningMode = "raw"
)

// Defines values for ImageSBOMPipelinePurpose.
const (
	ImageSBOMPipelinePurposeBuildroot ImageSBOMPipelinePurpose = "buildroot"

	ImageSBOMPipelinePurposeImage ImageSBOMPipelinePurpose = "image"
)

// Defines values for ImageSBOMSbomType.
const (
	ImageSBOMSbomTypeSpdx ImageSBOMSbomType = "spdx"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureEap7Rhui ImageTypes = "azure-eap7-rhui"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotBootableContainer ImageTypes = "iot-bootable-container"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesIotSimplifiedInstaller ImageTypes = "iot-simplified-installer"

	ImageTypesLiveInstaller ImageTypes = "live-installer"

	ImageTypesMinimalRaw ImageTypes = "minimal-raw"

	ImageTypesOci ImageTypes = "oci"

	ImageTypesVsphere ImageTypes = "vsphere"

	ImageTypesVsphereOva ImageTypes = "vsphere-ova"

	ImageTypesWsl ImageTypes = "wsl"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"

	UploadTypesLocal UploadTypes = "local"

	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"

	UploadTypesPulpOstree UploadTypes = "pulp.ostree"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// Blueprint defines model for Blueprint.
type Blueprint struct {
	// Container images to embed into the final artfact
	Containers     *[]Container             `json:"containers,omitempty"`
	Customizations *BlueprintCustomizations `json:"customizations,omitempty"`
	Description    *string                  `json:"description,omitempty"`

	// The distribution to use for the compose. If left empty the host
	// distro will be used.
	Distro *string `json:"distro,omitempty"`

	// Package groups to be installed
	Groups *[]PackageGroup `json:"groups,omitempty"`

	// An alias for packages, retained for backwards compatability
	Modules *[]Package `json:"modules,omitempty"`
	Name    string     `json:"name"`

	// Packages to be installed
	Packages *[]Package `json:"packages,omitempty"`

	// A semver version number
	Version *string `json:"version,omitempty"`
}

// BlueprintCustomizations defines model for BlueprintCustomizations.
type BlueprintCustomizations struct {
	// Directories to create in the final artifact
	Directories *[]Directory `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo *FDO `json:"fdo,omitempty"`

	// Files to create in the final artifact
	Files *[]BlueprintFile `json:"files,omitempty"`

	// List of filesystem mountpoints to create
	Filesystem *[]BlueprintFilesystem `json:"filesystem,omitempty"`

	// Enable FIPS mode
	Fips *bool `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *BlueprintFirewall `json:"firewall,omitempty"`

	// List of groups to create
	Group *[]Group `json:"group,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale            `json:"locale,omitempty"`
	Openscap *BlueprintOpenSCAP `json:"openscap,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *BlueprintCustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Repositories to write to /etc/yum.repos.d/ in the final image. Note
	// that these are not used at build time.
	Repositories *[]BlueprintRepository `json:"repositories,omitempty"`
	Rhsm         *RHSMCustomization     `json:"rhsm,omitempty"`
	Rpm          *RPMCustomization      `json:"rpm,omitempty"`
	Services     *Services              `json:"services,omitempty"`

	// List of ssh keys
	Sshkey *[]SSHKey `json:"sshkey,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`

	// List of users to create
	User *[]BlueprintUser `json:"user,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type BlueprintCustomizationsPartitioningMode string

// A custom file to create in the final artifact.
type BlueprintFile struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// BlueprintFilesystem defines model for BlueprintFilesystem.
type BlueprintFilesystem struct {
	// size of the filesystem in bytes
	Minsize    uint64 `json:"minsize"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type BlueprintFirewall struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
	Zones    *[]FirewallZones  `json:"zones,omitempty"`
}

// BlueprintOpenSCAP defines model for BlueprintOpenSCAP.
type BlueprintOpenSCAP struct {
	Datastream    *string                `json:"datastream,omitempty"`
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// BlueprintRepository defines model for BlueprintRepository.
type BlueprintRepository struct {
	Baseurls   *[]string `json:"baseurls,omitempty"`
	Enabled    *bool     `json:"enabled,omitempty"`
	Filename   *string   `json:"filename,omitempty"`
	Gpgcheck   *bool     `json:"gpgcheck,omitempty"`
	Gpgkeys    *[]string `json:"gpgkeys,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool   `json:"module_hotfixes,omitempty"`
	Name           *string `json:"name,omitempty"`
	Priority       *int    `json:"priority,omitempty"`
	RepoGpgcheck   *bool   `json:"repo_gpgcheck,omitempty"`
	Sslverify      *bool   `json:"sslverify,omitempty"`
}

// BlueprintUser defines model for BlueprintUser.
type BlueprintUser struct {
	Description *string `json:"description,omitempty"`

	// Group id to use instead of the default
	Gid *int `json:"gid,omitempty"`

	// A list of additional groups to add the user to
	Groups *[]string `json:"groups,omitempty"`

	// The user's home directory
	Home *string `json:"home,omitempty"`

	// ssh public key
	Key  *string `json:"key,omitempty"`
	Name string  `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`

	// Login shell to use
	Shell *string `json:"shell,omitempty"`

	// User id to use instead of the default
	Uid *int `json:"uid,omitempty"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Blueprint      *Blueprint      `json:"blueprint,omitempty"`
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeSBOMs defines model for ComposeSBOMs.
type ComposeSBOMs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// The SBOM documents for each image built in the compose.
	Items [][]ImageSBOM `json:"items"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name *string `json:"name,omitempty"`

	// Reference to the container to embed
	Source string `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// CustomRepository defines model for CustomRepository.
type CustomRepository struct {
	Baseurl        *[]string `json:"baseurl,omitempty"`
	CheckGpg       *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg   *bool     `json:"check_repo_gpg,omitempty"`
	Enabled        *bool     `json:"enabled,omitempty"`
	Filename       *string   `json:"filename,omitempty"`
	Gpgkey         *[]string `json:"gpgkey,omitempty"`
	Id             string    `json:"id"`
	Metalink       *string   `json:"metalink,omitempty"`
	Mirrorlist     *string   `json:"mirrorlist,omitempty"`
	ModuleHotfixes *bool     `json:"module_hotfixes,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Priority       *int      `json:"priority,omitempty"`
	SslVerify      *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers *[]Container `json:"containers,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will be used to depsolve and retrieve packages. Additionally,
	// these packages will be saved and imported to the `/etc/yum.repos.d/` directory
	// on the image
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Directories        *[]Directory        `json:"directories,omitempty"`

	// FIDO device onboard configuration
	Fdo        *FDO          `json:"fdo,omitempty"`
	Files      *[]File       `json:"files,omitempty"`
	Filesystem *[]Filesystem `json:"filesystem,omitempty"`

	// System FIPS mode setup
	Fips *FIPS `json:"fips,omitempty"`

	// Firewalld configuration
	Firewall *FirewallCustomization `json:"firewall,omitempty"`

	// List of groups to create
	Groups *[]Group `json:"groups,omitempty"`

	// Configures the hostname
	Hostname *string `json:"hostname,omitempty"`

	// Ignition configuration
	Ignition *Ignition `json:"ignition,omitempty"`

	// Name of the installation device, currently only useful for the edge-simplified-installer type
	InstallationDevice *string    `json:"installation_device,omitempty"`
	Installer          *Installer `json:"installer,omitempty"`
	Kernel             *Kernel    `json:"kernel,omitempty"`

	// Locale configuration
	Locale   *Locale   `json:"locale,omitempty"`
	Openscap *OpenSCAP `json:"openscap,omitempty"`
	Packages *[]string `json:"packages,omitempty"`

	// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository      `json:"payload_repositories,omitempty"`
	Rhsm                *RHSMCustomization `json:"rhsm,omitempty"`
	Rpm                 *RPMCustomization  `json:"rpm,omitempty"`
	Services            *Services          `json:"services,omitempty"`
	Subscription        *Subscription      `json:"subscription,omitempty"`

	// Timezone configuration
	Timezone *Timezone `json:"timezone,omitempty"`
	Users    *[]User   `json:"users,omitempty"`
}

// Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DNFPluginConfig defines model for DNFPluginConfig.
type DNFPluginConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom directory to create in the final artifact.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// DistributionList defines model for DistributionList.
type DistributionList struct {
	Map *DistributionList_Map `json:"map,omitempty"`
}

// DistributionList_Map defines model for DistributionList.Map.
type DistributionList_Map struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// FIDO device onboard configuration
type FDO struct {
	DiMfgStringTypeMacIface *string `json:"di_mfg_string_type_mac_iface,omitempty"`
	DiunPubKeyHash          *string `json:"diun_pub_key_hash,omitempty"`
	DiunPubKeyInsecure      *string `json:"diun_pub_key_insecure,omitempty"`
	DiunPubKeyRootCerts     *string `json:"diun_pub_key_root_certs,omitempty"`
	ManufacturingServerUrl  *string `json:"manufacturing_server_url,omitempty"`
}

// System FIPS mode setup
type FIPS struct {
	// Enables the system FIPS mode
	Enabled *bool `json:"enabled,omitempty"`
}

// A custom file to create in the final artifact.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// Firewalld configuration
type FirewallCustomization struct {
	// List of ports (or port ranges) and protocols to open
	Ports *[]string `json:"ports,omitempty"`

	// Firewalld services to enable or disable
	Services *FirewallServices `json:"services,omitempty"`
}

// Firewalld services to enable or disable
type FirewallServices struct {
	// List of services to disable
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable
	Enabled *[]string `json:"enabled,omitempty"`
}

// Bind a list of network sources to a zone to restrict traffic from
// those sources based on the settings of the zone.
type FirewallZones struct {
	// name of the zone, if left empty the sources will apply to
	// the default zone.
	Name *string `json:"name,omitempty"`

	// List of sources for the zone
	Sources *[]string `json:"sources,omitempty"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// Group defines model for Group.
type Group struct {
	// Group id of the group to create (optional)
	Gid *int `json:"gid,omitempty"`

	// Name of the group to create
	Name string `json:"name"`
}

// Ignition configuration
type Ignition struct {
	Embedded  *IgnitionEmbedded  `json:"embedded,omitempty"`
	Firstboot *IgnitionFirstboot `json:"firstboot,omitempty"`
}

// IgnitionEmbedded defines model for IgnitionEmbedded.
type IgnitionEmbedded struct {
	Config string `json:"config"`
}

// IgnitionFirstboot defines model for IgnitionFirstboot.
type IgnitionFirstboot struct {
	// Provisioning URL
	Url string `json:"url"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size *uint64 `json:"size,omitempty"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`

	// The type and options for multiple upload targets. Each item defines
	// a separate upload destination with its own options. Multiple
	// different targets as well as multiple targets of the same kind are
	// supported.
	UploadTargets *[]UploadTarget `json:"upload_targets,omitempty"`
}

// ImageSBOM defines model for ImageSBOM.
type ImageSBOM struct {
	// The name of the osbuild pipeline which has the packages described
	// in the SBOM installed.
	PipelineName string `json:"pipeline_name"`

	// The purpose of the pipeline. The `buildroot` pipeline was used for
	// the build environment dueing the image build. The `image` pipeline
	// represents the actual content of the image. Due to the nature of
	// some image types, there may be multiple pipelines of the same
	// purpose.
	PipelinePurpose ImageSBOMPipelinePurpose `json:"pipeline_purpose"`

	// The SBOM document in the 'sbom_type' format.
	Sbom interface{} `json:"sbom"`

	// The type of the SBOM document. Currently only SPDX is supported.
	SbomType ImageSBOMSbomType `json:"sbom_type"`
}

// The purpose of the pipeline. The `buildroot` pipeline was used for
// the build environment dueing the image build. The `image` pipeline
// represents the actual content of the image. Due to the nature of
// some image types, there may be multiple pipelines of the same
// purpose.
type ImageSBOMPipelinePurpose string

// The type of the SBOM document. Currently only SPDX is supported.
type ImageSBOMSbomType string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error          *ComposeStatusError `json:"error,omitempty"`
	Status         ImageStatusValue    `json:"status"`
	UploadStatus   *UploadStatus       `json:"upload_status,omitempty"`
	UploadStatuses *[]UploadStatus     `json:"upload_statuses,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// ImportKeys defines model for ImportKeys.
type ImportKeys struct {
	Files *[]string `json:"files,omitempty"`
}

// Installer defines model for Installer.
type Installer struct {
	SudoNopasswd *[]string `json:"sudo-nopasswd,omitempty"`
	Unattended   *bool     `json:"unattended,omitempty"`
}

// Kernel defines model for Kernel.
type Kernel struct {
	// Appends arguments to the bootloader kernel command line
	Append *string `json:"append,omitempty"`

	// Name of the kernel to use
	Name *string `json:"name,omitempty"`
}

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// LocalUploadOptions defines model for LocalUploadOptions.
type LocalUploadOptions struct {
	// This is used in combination with the OSBUILD_LOCALSAVE environmental
	// variable on the server to enable saving the compose locally. This
	// is for development use only, and is not available to users.
	LocalSave bool `json:"local_save"`
}

// Locale configuration
type Locale struct {
	// Sets the keyboard layout
	Keyboard *string `json:"keyboard,omitempty"`

	// List of locales to be installed, the first one becomes primary, subsequent ones are secondary
	Languages *[]string `json:"languages,omitempty"`
}

// OCIUploadOptions defines model for OCIUploadOptions.
type OCIUploadOptions map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	JsonTailoring *OpenSCAPJSONTailoring `json:"json_tailoring,omitempty"`

	// Puts a specified policy ID in the RHSM facts, so that any instances registered to
	// insights will be automatically connected to the compliance policy in the console.
	PolicyId  *string            `json:"policy_id,omitempty"`
	ProfileId string             `json:"profile_id"`
	Tailoring *OpenSCAPTailoring `json:"tailoring,omitempty"`
}

// OpenSCAPJSONTailoring defines model for OpenSCAPJSONTailoring.
type OpenSCAPJSONTailoring struct {
	Filepath  string `json:"filepath"`
	ProfileId string `json:"profile_id"`
}

// OpenSCAPTailoring defines model for OpenSCAPTailoring.
type OpenSCAPTailoring struct {
	Selected   *[]string `json:"selected,omitempty"`
	Unselected *[]string `json:"unselected,omitempty"`
}

// Package defines model for Package.
type Package struct {
	// Name of the package to install. File globbing is supported,
	// eg. 'openssh-*'
	Name string `json:"name"`

	// Optional version of the package to install. If left blank the
	// latest available version will be used. Wildcards are supported
	// eg. '4.11.*'
	Version *string `json:"version,omitempty"`
}

// PackageGroup defines model for PackageGroup.
type PackageGroup struct {
	// Package group name
	Name string `json:"name"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PulpOSTreeUploadOptions defines model for PulpOSTreeUploadOptions.
type PulpOSTreeUploadOptions struct {
	// Basepath for distributing the repository
	Basepath string `json:"basepath"`

	// Repository to import the ostree commit to
	Repository    *string `json:"repository,omitempty"`
	ServerAddress *string `json:"server_address,omitempty"`
}

// PulpOSTreeUploadStatus defines model for PulpOSTreeUploadStatus.
type PulpOSTreeUploadStatus struct {
	RepoUrl string `json:"repo_url"`
}

// RHSMConfig defines model for RHSMConfig.
type RHSMConfig struct {
	DnfPlugins          *SubManDNFPluginsConfig `json:"dnf_plugins,omitempty"`
	SubscriptionManager *SubManConfig           `json:"subscription_manager,omitempty"`
}

// RHSMCustomization defines model for RHSMCustomization.
type RHSMCustomization struct {
	Config *RHSMConfig `json:"config,omitempty"`
}

// RPMCustomization defines model for RPMCustomization.
type RPMCustomization struct {
	ImportKeys *ImportKeys `json:"import_keys,omitempty"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool `json:"check_repo_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Disables modularity filtering for this repository.
	ModuleHotfixes *bool `json:"module_hotfixes,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// SSHKey defines model for SSHKey.
type SSHKey struct {
	// Adds the key to the user's authorized_keys file
	Key string `json:"key"`

	// User to configure the ssh key for
	User string `json:"user"`
}

// Services defines model for Services.
type Services struct {
	// List of services to disable by default
	Disabled *[]string `json:"disabled,omitempty"`

	// List of services to enable by default
	Enabled *[]string `json:"enabled,omitempty"`

	// List of services to mask by default
	Masked *[]string `json:"masked,omitempty"`
}

// SubManConfig defines model for SubManConfig.
type SubManConfig struct {
	Rhsm      *SubManRHSMConfig      `json:"rhsm,omitempty"`
	Rhsmcertd *SubManRHSMCertdConfig `json:"rhsmcertd,omitempty"`
}

// SubManDNFPluginsConfig defines model for SubManDNFPluginsConfig.
type SubManDNFPluginsConfig struct {
	ProductId           *DNFPluginConfig `json:"product_id,omitempty"`
	SubscriptionManager *DNFPluginConfig `json:"subscription_manager,omitempty"`
}

// SubManRHSMCertdConfig defines model for SubManRHSMCertdConfig.
type SubManRHSMCertdConfig struct {
	AutoRegistration *bool `json:"auto_registration,omitempty"`
}

// SubManRHSMConfig defines model for SubManRHSMConfig.
type SubManRHSMConfig struct {
	ManageRepos *bool `json:"manage_repos,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// Timezone configuration
type Timezone struct {
	// List of ntp servers
	Ntpservers *[]string `json:"ntpservers,omitempty"`

	// Name of the timezone, defaults to UTC
	Timezone *string `json:"timezone,omitempty"`
}

// Options for a given upload destination.
// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTarget defines model for UploadTarget.
type UploadTarget struct {
	Type UploadTypes `json:"type"`

	// Options for a given upload destination.
	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions UploadOptions `json:"upload_options"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`

	// If the password starts with $6$, $5$, or $2b$ it will be stored as
	// an encrypted password. Otherwise it will be treated as a plain text
	// password.
	Password *string `json:"password,omitempty"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// Getter for additional properties for DistributionList_Map. Returns the specified
// element and whether it was found
func (a DistributionList_Map) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DistributionList_Map
func (a *DistributionList_Map) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DistributionList_Map to handle AdditionalProperties
func (a *DistributionList_Map) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DistributionList_Map to handle AdditionalProperties
func (a DistributionList_Map) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get the SBOMs for a compose.
	// (GET /composes/{id}/sboms)
	GetComposeSBOMs(ctx echo.Context, id string) error
	// Get all of the supported distribution repository details
	// (GET /distributions)
	GetDistributionList(ctx echo.Context) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetComposeSBOMs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeSBOMs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeSBOMs(ctx, id)
	return err
}

// GetDistributionList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributionList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributionList(ctx)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/composes/:id/sboms", wrapper.GetComposeSBOMs)
	router.GET(baseURL+"/distributions", wrapper.GetDistributionList)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
